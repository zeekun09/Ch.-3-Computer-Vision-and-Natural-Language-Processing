Assignment Chapter 3 - COMPUTER VISION [Case #3]
Startup Campus, Indonesia - Artificial Intelligence (AI) (Batch 7)

Dataset: Any YouTube videos
Libraries: PyTorch, Numpy, OpenCV2
Objective: Real-time Object Detection using CNN-based Pre-trained Models
PERSYARATAN Semua modul (termasuk versi yang sesuai) sudah di-install dengan benar.
CARA PENGERJAAN Lengkapi baris kode yang ditandai dengan #TODO.
TARGET PORTFOLIO Peserta mampu mengimplementasikan model PyTorch untuk mendeteksi objek secara real-time.

Hasil Video Object Detection
Link GDrive : https://drive.google.com/drive/folders/1xucSn0EFfaDxYQ_gPrHaIOTysS0BgLoe?usp=drive_link

Install additional library
!pip install cap-from-youtube

Import Library
import torch
import numpy as np
import cv2

from cap_from_youtube import cap_from_youtube
from time import time
from datetime import datetime as dt

User-Defined Class
class ObjectDetection:
    def __init__(self, url, out_file="{}_video.avi".format(dt.now().strftime("%Y%m%d_%H%M%S"))):
        """
        Initializes the class with youtube url and output file.
        :param url: Has to be as youtube URL,on which prediction is made.
        :param out_file: A valid output file name.
        """

        self._URL = url
        self.model = self.load_model()
        self.classes = self.model.names
        self.out_file = out_file
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'

    def get_video_from_url(self):
        """
        Creates a new video streaming object to extract video frame by frame to make prediction on.
        :return: opencv2 video capture object, with lowest quality frame available for video.
        """

        return cap_from_youtube(self._URL)

    def load_model(self):
        """
        Loads the model from pytorch hub.
        :return: Trained Pytorch model.
        """

        # TODO: Panggil model ultralytics/yolov5
        # Lihat caranya di https://pytorch.org/hub/ultralytics_yolov5/#load-from-pytorch-hub
        model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
        return model

    def score_frame(self, frame):
        """
        Takes a single frame as input, and scores the frame using yolo5 model.
        :param frame: input frame in numpy/list/tuple format.
        :return: Labels and Coordinates of objects detected by model in the frame.
        """

        self.model.to(self.device)

        frame = [frame]
        results = self.model(frame)
        labels, cord = results.xyxyn[0][:, -1].cpu().numpy(), results.xyxyn[0][:, :-1].cpu().numpy()
        return labels, cord

    def class_to_label(self, x):
        """
        For a given label value, return corresponding string label.
        :param x: numeric label
        :return: corresponding string label
        """

        return self.classes[int(x)]

    def plot_boxes(self, results, frame):
        """
        Takes a frame and its results as input, and plots the bounding boxes and label on to the frame.
        :param results: contains labels and coordinates predicted by model on the given frame.
        :param frame: Frame which has been scored.
        :return: Frame with bounding boxes and labels ploted on it.
        """

        labels, cord = results
        n = len(labels)
        x_shape, y_shape = frame.shape[1], frame.shape[0]
        for i in range(n):
            row = cord[i]
            if row[4] >= 0.2:
                x1, y1, x2, y2 = int(row[0]*x_shape), int(row[1]*y_shape), int(row[2]*x_shape), int(row[3]*y_shape)
                bgr = (0, 255, 0)
                cv2.rectangle(frame, (x1, y1), (x2, y2), bgr, 2)
                cv2.putText(frame, self.class_to_label(labels[i]), (x1, y1), cv2.FONT_HERSHEY_SIMPLEX, 0.9, bgr, 2)

        return frame

    def __call__(self):
        """
        This function is called when class is executed, it runs the loop to read the video frame by frame,
        and write the output into a new file.
        :return: void
        """

        player = self.get_video_from_url()
        assert player.isOpened()

        x_shape = int(player.get(cv2.CAP_PROP_FRAME_WIDTH))
        y_shape = int(player.get(cv2.CAP_PROP_FRAME_HEIGHT))
        four_cc = cv2.VideoWriter_fourcc(*"MJPG")
        out = cv2.VideoWriter(self.out_file, four_cc, 20, (x_shape, y_shape))

        for i in range(1, 300):
            start_time = time()
            ret, frame = player.read()

            results = self.score_frame(frame)
            frame = self.plot_boxes(results, frame)
            end_time = time()

            fps = 1/np.round(end_time - start_time, 3)
            print(f"Frames Per Second : {fps}")
            out.write(frame)

IMPORTANT: Activate your GPU
Start Object Detection
if __name__ == "__main__":
    # Pastikan CUDA enable: TRUE
    print("CUDA enable: {}".format(torch.cuda.is_available()))

    # TODO: Isi parameter dengan URL YouTube yang tersedia (secara bergantian):
    # 1. Crowded place: https://www.youtube.com/watch?v=dwD1n7N7EAg
    # 2. Solar system: https://www.youtube.com/watch?v=g2KmtA97HxY
    # 3. Road traffic: https://www.youtube.com/watch?v=wqctLW0Hb_0
    run_model = ObjectDetection(url="https://www.youtube.com/watch?v=g2KmtA97HxY")
    run_model()

# [ PERTANYAAN ]
# TODO: Apa perbedaan "image classification" dan "object detection"?
Secara Sederhana Image Classification adalah pengkategorian suatu gambar ke dalam suatu kategori tertentu. Sedangkan Object Detection adalah klasifikasi dan lokalisasi untuk beberapa objek dalam satu gambar.

# [ PERTANYAAN ]
# TODO: Di video mana YOLOv5 memiliki akurasi deteksi terburuk? Mengapa?
Setelah di amati hasil dari ke tiga video youtube tersebut, YOLOv5 memiliki akurasi terburuknya ada pada video Solar System klarena objek dalam video tersebut bukanlah objek yang ada di pelatihan YOLOv5. Model ini tidak bisa mendeteksi Planet-Planet atau Tata Surya karena model ini dilatih dengan dataset COCO Class , di mana berisi objek umum seperti hewan, kendaraan, orang, dan lainya. Sedangkan untuk video Crowd Place (tempat keramain) dan Road Traffic atau Lalu lintas, model ini bisa mendeteksi nya seperti orang untuk Video Crowd Place dan Mobil atau truk untuk video Road Traffic

Hasil Video Object Detection
Link GDrive : https://drive.google.com/drive/folders/1Qwjainhaas8aSQkhlZdZ8vA9fPC5Im4n?usp=drive_link
